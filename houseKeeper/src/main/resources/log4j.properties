#优先级从高到低分别是OFF,FATAL,ERROR,WARN,INFO,DEBUG,TRACE,ALL;定义高级别,低级别信息不被打印出来
#Log4j建议只使用四个级别，优先级从低到高分别是DEBUG,INFO,WARN,ERROR(比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来)
log4j.rootLogger = ALL,systemOut,infoLogDailyFile,errorLogDailyFile

#输出到控制台
log4j.appender.systemOut = org.apache.log4j.ConsoleAppender 
log4j.appender.systemOut.layout = org.apache.log4j.PatternLayout 
log4j.appender.systemOut.layout.ConversionPattern = [%-5p][%-19d{yyyy-MM-dd HH:mm:ss}][%c]%m%n 
log4j.appender.systemOut.Threshold = DEBUG 
log4j.appender.systemOut.ImmediateFlush = TRUE 
log4j.appender.systemOut.Target = System.out

#输出到文件 
#log4j.appender.logFile = org.apache.log4j.FileAppender 
#log4j.appender.logFile.layout = org.apache.log4j.PatternLayout 
#log4j.appender.logFile.layout.ConversionPattern = [%-5p][%-19d{yyyy-MM-dd HH:mm:ss}][%l]%m%n 
#log4j.appender.logFile.Threshold = DEBUG 
#log4j.appender.logFile.ImmediateFlush = TRUE 
#log4j.appender.logFile.Append = TRUE 
#log4j.appender.logFile.File = /houseKeeper/log/houseKeeper.log 
#log4j.appender.logFile.Encoding = UTF-8 

#按DatePattern输出到info文件 
log4j.appender.infoLogDailyFile = org.apache.log4j.DailyRollingFileAppender 
log4j.appender.infoLogDailyFile.layout = org.apache.log4j.PatternLayout 
log4j.appender.infoLogDailyFile.layout.ConversionPattern = [%-5p][%-19d{yyyy-MM-dd HH:mm:ss}][%l]%m%n 
#指定日志消息的输出最低层次
log4j.appender.infoLogDailyFile.Threshold = INFO 
#默认值是true,所有的消息都会被立即输出
log4j.appender.infoLogDailyFile.ImmediateFlush = TRUE 
#默认值true,将消息追加到指定文件中，false指将消息覆盖指定的文件内容 
log4j.appender.infoLogDailyFile.Append = TRUE 
#指定消息输出到C:/log4j.log文件 
log4j.appender.infoLogDailyFile.File = /houseKeeper/log/houseKeeper_info.log 
#'.'yyyy-ww:每周滚动一次文件,即每周产生一个新的文件。还可以按用以下参数:
#'.'yyyy-MM:每月 
#'.'yyyy-ww:每周 
#'.'yyyy-MM-dd:每天 
#'.'yyyy-MM-dd-a:每天两次 
#'.'yyyy-MM-dd-HH:每小时 
#'.'yyyy-MM-dd-HH-mm:每分钟
log4j.appender.infoLogDailyFile.DatePattern = '.'yyyy-MM-dd'.log' 
#可以指定文件编码格式
log4j.appender.infoLogDailyFile.Encoding = UTF-8

#按DatePattern输出到error文件 
log4j.appender.errorLogDailyFile = org.apache.log4j.DailyRollingFileAppender 
log4j.appender.errorLogDailyFile.layout = org.apache.log4j.PatternLayout 
log4j.appender.errorLogDailyFile.layout.ConversionPattern = [%-5p][%-19d{yyyy-MM-dd HH:mm:ss}][%l]%m%n 
#指定日志消息的输出最低层次
log4j.appender.errorLogDailyFile.Threshold = ERROR
#默认值是true,所有的消息都会被立即输出
log4j.appender.errorLogDailyFile.ImmediateFlush = TRUE 
#默认值true,将消息追加到指定文件中，false指将消息覆盖指定的文件内容 
log4j.appender.logDailyFile.Append = TRUE 
#指定消息输出到C:/log4j.log文件 
log4j.appender.errorLogDailyFile.File = /houseKeeper/log/houseKeeper_error.log 
#分小时打印
log4j.appender.errorLogDailyFile.DatePattern = '.'yyyy-MM-dd'.log' 
#可以指定文件编码格式
log4j.appender.errorLogDailyFile.Encoding = UTF-8

#设定文件大小输出到文件 
#log4j.appender.logRollingFile = org.apache.log4j.RollingFileAppender 
#log4j.appender.logRollingFile.layout = org.apache.log4j.PatternLayout 
#log4j.appender.logRollingFile.layout.ConversionPattern = [%-5p][%-19d{yyyy-MM-dd HH:mm:ss}][%l]%m%n 
#log4j.appender.logRollingFile.Threshold = DEBUG 
#log4j.appender.logRollingFile.ImmediateFlush = TRUE 
#log4j.appender.logRollingFile.Append = TRUE 
#log4j.appender.logRollingFile.File = /houseKeeper/log/houseKeeper.log 
#后缀可以是KB,MB,GB.在日志文件到达该大小时,将会自动滚动.如:log4j.log.1 
#log4j.appender.logRollingFile.MaxFileSize = 1MB 
#指定可以产生的滚动文件的最大数 
#log4j.appender.logRollingFile.MaxBackupIndex = 10 
#log4j.appender.logRollingFile.Encoding = UTF-8
